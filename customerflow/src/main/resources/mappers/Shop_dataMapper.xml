<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.carry.customerflow.mapper.Shop_dataMapper">
    <select id="selectWithin1hour" resultType="java.lang.Integer" >
    select count(*) from shop_data where update_time>=(NOW() - interval 1 hour)
  </select>

    <select id="selectWithin1hourByAddress" resultType="java.lang.Integer" >
    select count(*) from shop_data where address = #{address} and update_time>=(NOW() - interval 1 hour)
  </select>

    <select id="getCustomerPerHour" resultType="com.carry.customerflow.bean.CustomerPerHour" >
    select hour_customer_number,hours from shop_data where address = #{address} and  ( datediff ( update_time , #{dateTime} ) = 0 ) order by update_time desc
  </select>

    <select id="getInCustomerPerHour" resultType="com.carry.customerflow.bean.InCustomerPerHour" >
    select hour_in_customer_number,hours from shop_data where address = #{address} and  ( datediff ( update_time , #{dateTime} ) = 0 ) order by update_time desc
  </select>

    <select id="getMainData" resultType="com.carry.customerflow.bean.Shop_data" >
    select * from shop_data where address = #{address} and  ( datediff ( update_time , #{dateTime} ) = 0 ) order by update_time desc
  </select>

    <select id="showDynamicCustomer" resultType="java.lang.Integer" >
    select dynamic_customer from shop_data where id in (select id from (select * from shop_data where address=#{address} ORDER BY update_time desc LIMIT 1)as t)
  </select>

    <insert id="insertShop">
        insert into shop_data
        (address,walker_number,customer_number,new_customer,jump_out,dynamic_customer,hour_customer_number,hour_in_customer_number,update_time,hours)
        values
        (#{address},0,0,0,0,0,0,0,CURRENT_TIMESTAMP,#{hours})
    </insert>

    <update id="updateWithin1hour" >
        UPDATE
        shop_data
        SET
        update_time = CURRENT_TIMESTAMP, hours = #{hours}
        WHERE
        id in (select id from (select * from shop_data ORDER BY update_time desc LIMIT #{num})as t)
    </update>

    <update id="updateShop_data" >
        UPDATE
        shop_data
        SET
        customer_number = customer_number+#{customer},walker_number =walker_number+#{walker},new_customer = new_customer+#{newIn},hour_in_customer_number = hour_in_customer_number+#{hour_in_customer},jump_out = jump_out+#{jumpOut}
        WHERE
        id in (select id from (select * from shop_data where address=#{address} ORDER BY update_time desc LIMIT 1)as t)
    </update>

    <select id="searchNowHour_in_customer_number" resultType="java.lang.Integer" >
    select hour_in_customer_number from shop_data where id in (select id from (select * from shop_data where address=#{address} ORDER BY update_time desc LIMIT 1)as t)
  </select>

    <update id="updateDataThread" >
        UPDATE
        shop_data
        SET
        dynamic_customer = #{dynamic_customer},jump_out =jump_out+#{jumpOut_customer},hour_customer_number = #{subHour_customer}
        WHERE
        id in (select id from (select * from shop_data where address=#{address} ORDER BY update_time desc LIMIT 1)as t)
    </update>

    <update id="updateExtraJumpOut">
      UPDATE
      shop_data
      SET
      jump_out =jump_out+1
      WHERE
      id in (select id from (select * from shop_data where address=#{address} ORDER BY update_time desc LIMIT 1)as t)
    </update>

    <delete id="deleteExpiredShop_data">
        delete from shop_data where update_time &lt; DATE_SUB(CURDATE(),INTERVAL 3 MONTH)
    </delete>

    <select id="getDayComparison" resultType="com.carry.customerflow.bean.Shop_data">
      select *
      from shop_data
      where (datediff ( update_time , date_sub(#{dateTime},interval #{num} day) ) = 0 ) and address = #{address}
    </select>

    <select id="getThisWeekComparison" resultType="com.carry.customerflow.bean.Shop_data">
        select *
        from shop_data
        where (update_time &gt;= date_sub(#{dateTime},INTERVAL WEEKDAY(#{dateTime}) + 1 DAY)
        and update_time &lt;= #{dateTime} or datediff ( update_time , #{dateTime}) = 0)
        and address = #{address}
    </select>
    
    <select id="getWeekComparison" resultType="com.carry.customerflow.bean.Shop_data">
        select *
        from shop_data
        where (update_time &gt;= date_sub(#{dateTime},INTERVAL WEEKDAY(#{dateTime}) + (8+#{num}) DAY)
            and update_time &lt;= date_sub(#{dateTime},INTERVAL WEEKDAY(#{dateTime}) + (2+#{num}) DAY)
            or datediff ( update_time , date_sub(date_sub(#{dateTime},INTERVAL WEEKDAY(#{dateTime}) + (2+#{num}) DAY),interval 0 day) ) = 0)
            and address = #{address}
    </select>
</mapper>